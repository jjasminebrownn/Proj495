using System;
using System.Collections.Generic;
using MySql.Data.MySqlClient;

namespace PhysioDynamik_Prototype_1
{
    public class Patient
    {
        public string Name { get; set; }
        public int PatientID { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public DateTime DateOfBirth { get; set; }
        public List<Appointment> AppointmentList { get; set; } = new List<Appointment>();
        private List<string> PaymentMethods { get; set; }
        public MedicalRecord MedicalRecord { get; set; }

// Method for patient registration
public static void RegisterPatient(SystemClass system)
 {
        Console.WriteLine("=== Patient Registration ===");

        // Collect patient details
        Console.Write("Enter your First Name: ");
        string firstName = Console.ReadLine();

        Console.Write("Enter your Last Name: ");
        string lastName = Console.ReadLine();

        Console.Write("Enter your Email: ");
        string email = Console.ReadLine();

        Console.Write("Create a Password: ");
        string password = Console.ReadLine();

        Console.Write("Confirm Password: ");
        string confirmPassword = Console.ReadLine();

        Console.Write("Enter your Phone Number: ");
        string phone = Console.ReadLine();

        Console.Write("Enter your Date of Birth (yyyy-mm-dd): ");
        if (!DateTime.TryParse(Console.ReadLine(), out DateTime dob))
        {
            Console.WriteLine("Invalid date format. Try again.");
            return;
        }
 // Validate and create account
        if (Account.CreateAccount(email, password, confirmPassword, firstName, lastName, phone, dob))
        {
            // Add patient to system
            var patient = new Patient
            {
                Name = $"{firstName} {lastName}",
                Email = email,
                PhoneNumber = phone,
                DateOfBirth = dob
            };

            system.AddPatient(patient);
            Console.WriteLine("Patient account successfully registered!");
        }
        else
        {
            Console.WriteLine("Failed to register patient.");

        // Method for selecting an appointment
        public void SelectAppointment(SystemClass system, string slot, int therapistID)
        {
            if (system.CheckSlotAvailability(slot))
            {
                var appointment = new Appointment
                {
                    AppointmentID = new Random().Next(1000, 9999),
                    Date = DateTime.Now,
                    Status = "Scheduled"
                };
                system.AddAppointment(appointment, slot);
                AppointmentList.Add(appointment);
            }
            else
            {
                Console.WriteLine("Selected slot is not available.");
            }
        }

        // Fetch a patient by ID
        public static Patient GetPatientByID(int id)
        {
            Patient patient = null;
            string connectionString = "Server=localhost;Database=PhysioDynamikDB;Uid=root;Pwd=password;";

            using (var connection = new MySqlConnection(connectionString))
            {
                try
                {
                    connection.Open();
                    string query = "SELECT * FROM Patients WHERE PatientID = @PatientID";
                    using (var cmd = new MySqlCommand(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@PatientID", id);
                        using (var reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                patient = new Patient
                                {
                                    PatientID = reader.GetInt32("PatientID"),
                                    Name = reader.GetString("Name"),
                                    Email = reader.GetString("Email"),
                                    PhoneNumber = reader.GetString("PhoneNumber"),
                                    DateOfBirth = reader.GetDateTime("DateOfBirth")
                                };

                                // Fetch associated medical record
                                patient.MedicalRecord = MedicalRecord.GetMedicalRecordByPatientID(id);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching patient: {ex.Message}");
                }
            }

            return patient;
        }

        // View patient information
        public void ViewPatientInformation()
        {
            Console.WriteLine($"Name: {Name}");
            Console.WriteLine($"Patient ID: {PatientID}");
            Console.WriteLine($"Email: {Email}");
            Console.WriteLine($"Phone: {PhoneNumber}");
            Console.WriteLine($"Date of Birth: {DateOfBirth.ToShortDateString()}");
        }
    }
}
    public class Therapist
    {
        public int TherapistID { get; set; }
        public string Name { get; set; }
        public string Specialty { get; set; }
        public List<Appointment> AppointmentList { get; set; }
        public bool PaymentConfirmed { get; set; }
        public List<AvailabilitySlot> AvailabilitySlots { get; set; }

        // Method to add an availability slot to a therapist's schedule
        public bool AddAvailability(AvailabilitySlot slot)
        {
            // Check if the time slot is already in the list
            foreach (var existingSlot in AvailabilitySlots)
            {
                if (existingSlot.StartTime == slot.StartTime && existingSlot.EndTime == slot.EndTime)
                {
                    Console.WriteLine($"Failure: The slot from {slot.StartTime} to {slot.EndTime} is already added.");
                    return false;
                }
            }

            AvailabilitySlots.Add(slot);
            Console.WriteLine($"Success: Slot from {slot.StartTime} to {slot.EndTime} added.");
            return true;
        }
    }

    public class AvailabilitySlot
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }

        // Constructor for creating a new AvailabilitySlot
        public AvailabilitySlot(DateTime startTime, DateTime endTime)
        {
            StartTime = startTime;
            EndTime = endTime;
        }
    }

    public class Appointment
    {
        public int AppointmentID { get; set; }
        public DateTime Date { get; set; }
        public string Status { get; set; }

        // Schedule an appointment
        public void ScheduleAppointment(DateTime date)
        {
            Date = date;
            Status = "Scheduled";
            Console.WriteLine($"Appointment {AppointmentID} scheduled for {Date}.");
        }

        // Cancel an appointment
        public void CancelAppointment()
        {
            Status = "Cancelled";
            Console.WriteLine($"Appointment {AppointmentID} has been cancelled.");
        }

        // View appointment status
        public void ViewStatus()
        {
            Console.WriteLine($"Appointment {AppointmentID} status: {Status}");
        }
    }

    public class SystemClass
    {
        public int SystemID { get; set; }
        public List<string> AvailableSlots { get; set; } = new List<string>
        {
            "9:00 AM", "10:00 AM", "11:00 AM", "1:00 PM", "2:00 PM"
        };

        public List<Appointment> Appointments { get; set; } = new List<Appointment>();
        public List<Therapist> Therapists { get; set; } = new List<Therapist>();

        // Add a therapist to the system
        public void AddTherapist(Therapist therapist)
        {
            Therapists.Add(therapist);
            Console.WriteLine($"Success: Therapist {therapist.Name} added to the system.");
        }

        // Upload therapist's availability slots
        public void UploadTherapistAvailabilities(int therapistID, List<AvailabilitySlot> availabilities)
        {
            var therapist = Therapists.Find(t => t.TherapistID == therapistID);
            if (therapist != null)
            {
                foreach (var slot in availabilities)
                {
                    therapist.AddAvailability(slot);
                }
            }
            else
            {
                Console.WriteLine($"Failure: Therapist with ID {therapistID} not found.");
            }
        }

        // Display all therapists and their availability slots
        public void DisplayTherapistAvailabilities()
        {
            foreach (var therapist in Therapists)
            {
                Console.WriteLine($"Therapist: {therapist.Name}");
                Console.WriteLine("Availability Slots:");
                foreach (var slot in therapist.AvailabilitySlots)
                {
                    Console.WriteLine($"- {slot.StartTime} to {slot.EndTime}");
                }
            }
        }

        // Check if a slot is available for a given therapist
        public bool CheckSlotAvailability(int therapistID, string slot)
        {
            var therapist = Therapists.Find(t => t.TherapistID == therapistID);
            if (therapist != null)
            {
                foreach (var availability in therapist.AvailabilitySlots)
                {
                    if (availability.StartTime.ToString("h:mm tt") == slot)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        // Display available slots
        public void DisplayAvailableSlots()
        {
            Console.WriteLine("Available Slots:");
            foreach (var slot in AvailableSlots)
            {
                Console.WriteLine(slot);
            }
        }

        // Check if a slot is available
        public bool CheckSlotAvailability(string slot)
        {
            return AvailableSlots.Contains(slot);
        }

        // Add a new appointment
        public void AddAppointment(Appointment appointment, string slot)
        {
            if (CheckSlotAvailability(slot))
            {
                Appointments.Add(appointment);
                AvailableSlots.Remove(slot);
                Console.WriteLine($"Appointment {appointment.AppointmentID} added for slot {slot}.");
            }
            else
            {
                Console.WriteLine("Selected slot is not available.");
            }
        }

        // Retrieve all appointments
        public void GetAppointments()
        {
            Console.WriteLine("Appointments List:");
            foreach (var appointment in Appointments)
            {
                Console.WriteLine($"ID: {appointment.AppointmentID}, Date: {appointment.Date}, Status: {appointment.Status}");
            }
        }

        // Run system to fetch and display patient and medical record details
        public void RunSystem()
        {
            Console.WriteLine("Welcome to PhysioDynamik System");
            Console.WriteLine("Enter Patient ID to view details: ");
            int patientID = int.Parse(Console.ReadLine() ?? "0");

            Patient patient = Patient.GetPatientByID(patientID);

            if (patient != null)
            {
                Console.WriteLine("\n--- Patient Details ---");
                patient.ViewPatientInformation();

                if (patient.MedicalRecord != null)
                {
                    Console.WriteLine("\n--- Medical Record ---");
                    patient.MedicalRecord.ViewMedicalRecord();
                }
                else
                {
                    Console.WriteLine("No medical record found for this patient.");
                }
            }
            else
            {
                Console.WriteLine("Patient not found.");
            }
        }
    }

    public class MedicalRecord
    {
        public int PatientID { get; set; }
        public string Report { get; set; }
        public List<DateTime> TreatmentHistory { get; set; }

        public static MedicalRecord GetMedicalRecordByPatientID(int patientID)
        {
            MedicalRecord record = null;
            string connectionString = "Server=localhost;Database=PhysioDynamikDB;Uid=root;Pwd=password;";

            using (var connection = new MySqlConnection(connectionString))
            {
                try
                {
                    connection.Open();
                    string query = "SELECT * FROM MedicalRecords WHERE PatientID = @PatientID";
                    using (var cmd = new MySqlCommand(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@PatientID", patientID);
                        using (var reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                record = new MedicalRecord
                                {
                                    PatientID = reader.GetInt32("PatientID"),
                                    Report = reader.GetString("Report")
                                };

                                record.TreatmentHistory = new List<DateTime>
                                {
                                    DateTime.Now.AddDays(-10),
                                    DateTime.Now.AddDays(-5)
                                };
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching medical record: {ex.Message}");
                }
            }

            return record;
        }

        public void ViewMedicalRecord()
        {
            Console.WriteLine($"Report: {Report}");
            Console.WriteLine("Treatment History:");
            foreach (var date in TreatmentHistory)
            {
                Console.WriteLine($"- {date.ToShortDateString()}");
            }
        }
    }
}

public class Assessment
{
    private int ClientID { get; set; }
    private string Description { get; set; }
    private string Status { get; set; }
    private string Result { get; set; }
}

public class ConfirmationEmail
{
    // Attributes
    public int PatientID { get; set; } // The ID of the patient
    public string Email { get; set; } // The email address to send the confirmation to
    public string Message { get; set; } // The confirmation message

    // Constructor
    public ConfirmationEmail(int patientID, string email, string message)
    {
        PatientID = patientID;
        Email = email;
        Message = message;
    }

    // Method: Send Confirmation Email
    public void Send()
    {
        if (string.IsNullOrWhiteSpace(Email))
        {
            Console.WriteLine("Invalid email address. Cannot send confirmation email.");
            return;
        }

        // Simulate sending an email
        Console.WriteLine($"Sending confirmation email to {Email}...");
        Console.WriteLine($"Patient ID: {PatientID}");
        Console.WriteLine($"Message: {Message}");
        Console.WriteLine("Confirmation email sent successfully!");
    }
}
public class RegistrationForm
{
    // Attributes
    public int FormID { get; set; } // Unique identifier for the form
    public Dictionary<string, string> PatientDetails { get; set; } // Stores patient information as key-value pairs

    // Constructor
    public RegistrationForm(int formID)
    {
        FormID = formID;
        PatientDetails = new Dictionary<string, string>();
    }

    // Method: Add Patient Details
    public void AddPatientDetail(string key, string value)
    {
        if (string.IsNullOrWhiteSpace(key) || string.IsNullOrWhiteSpace(value))
        {
            Console.WriteLine("Key and value cannot be empty.");
            return;
        }

        if (PatientDetails.ContainsKey(key))
        {
            Console.WriteLine($"Key '{key}' already exists. Updating value...");
            PatientDetails[key] = value; // Update the existing value
        }
        else
        {
            PatientDetails.Add(key, value); // Add new key-value pair
        }
    }

    // Method: Validate Information
    public bool ValidateInformation()
    {
        string[] requiredFields = { "Name", "Email", "PhoneNumber", "DateOfBirth" };

        foreach (var field in requiredFields)
        {
            if (!PatientDetails.ContainsKey(field) || string.IsNullOrWhiteSpace(PatientDetails[field]))
            {
                Console.WriteLine($"Missing or invalid information for: {field}");
                return false;
            }
        }

        Console.WriteLine("All patient information is valid.");
        return true;
    }

    // Method: Display Form Details
    public void DisplayFormDetails()
    {
        Console.WriteLine($"Registration Form ID: {FormID}");
        foreach (var detail in PatientDetails)
        {
            Console.WriteLine($"{detail.Key}: {detail.Value}");
        }
    }
}
