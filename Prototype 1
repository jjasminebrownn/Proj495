using System;
using System.Collections.Generic;
using MySql.Data.MySqlClient;

namespace PhysioDynamik_Prototype_1
{
    public class Patient
    {
        public string Name { get; set; }
        public int PatientID { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public DateTime DateOfBirth { get; set; }
        public List<Appointment> AppointmentList { get; set; } = new List<Appointment>();
        private List<string> PaymentMethods { get; set; }
        public MedicalRecord MedicalRecord { get; set; }

        // Method for selecting an appointment
        public void SelectAppointment(SystemClass system, string slot, int therapistID)
        {
            if (system.CheckSlotAvailability(slot))
            {
                var appointment = new Appointment
                {
                    AppointmentID = new Random().Next(1000, 9999),
                    Date = DateTime.Now,
                    Status = "Scheduled"
                };
                system.AddAppointment(appointment, slot);
                AppointmentList.Add(appointment);
            }
            else
            {
                Console.WriteLine("Selected slot is not available.");
            }
        }
    }

    public class Therapist
    {
        public int TherapistID { get; set; }
        public string Name { get; set; }
        public string Specialty { get; set; }
        public List<Appointment> AppointmentList { get; set; }
        public bool PaymentConfirmed { get; set; }
        public List<AvailabilitySlot> AvailabilitySlots { get; set; }

        // Method to add an availability slot to a therapist's schedule
        public bool AddAvailability(AvailabilitySlot slot)
        {
            // Check if the time slot is already in the list
            foreach (var existingSlot in AvailabilitySlots)
            {
                if (existingSlot.StartTime == slot.StartTime && existingSlot.EndTime == slot.EndTime)
                {
                    Console.WriteLine($"Failure: The slot from {slot.StartTime} to {slot.EndTime} is already added.");
                    return false;
                }
            }

            AvailabilitySlots.Add(slot);
            Console.WriteLine($"Success: Slot from {slot.StartTime} to {slot.EndTime} added.");
            return true;
        }

    }


    public class AvailabilitySlot
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }

        // Constructor for creating a new AvailabilitySlot
        public AvailabilitySlot(DateTime startTime, DateTime endTime)
        {
            StartTime = startTime;
            EndTime = endTime;
        }
    }    



    public class Appointment
    {
        public int AppointmentID { get; set; }
        public DateTime Date { get; set; }
        public string Status { get; set; }

        // Schedule an appointment
        public void ScheduleAppointment(DateTime date)
        {
            Date = date;
            Status = "Scheduled";
            Console.WriteLine($"Appointment {AppointmentID} scheduled for {Date}.");
        }

        // Cancel an appointment
        public void CancelAppointment()
        {
            Status = "Cancelled";
            Console.WriteLine($"Appointment {AppointmentID} has been cancelled.");
        }

        // View appointment status
        public void ViewStatus()
        {
            Console.WriteLine($"Appointment {AppointmentID} status: {Status}");
        }
    }

    public class SystemClass
    {
        public int SystemID { get; set; }
        public DatabaseHelper DatabaseHelper { get; set; }
        public List<string> AvailableSlots { get; set; } = new List<string>
        {
            "9:00 AM", "10:00 AM", "11:00 AM", "1:00 PM", "2:00 PM"
        };

        public List<Appointment> Appointments { get; set; } = new List<Appointment>();
        public List<Therapist> Therapists { get; set; } = new List<Therapist>();

    // Add a therapist to the system
        public void AddTherapist(Therapist therapist)
        {
            Therapists.Add(therapist);
            Console.WriteLine($"Success: Therapist {therapist.Name} added to the system.");
        }
   
    // Upload therapist's availability slots
        public void UploadTherapistAvailabilities(int therapistID, List<AvailabilitySlot> availabilities)
        {
            var therapist = Therapists.Find(t => t.TherapistID == therapistID);
            if (therapist != null)
            {
                foreach (var slot in availabilities)
                {
                    therapist.AddAvailability(slot);
                }
            }
            else
            {
                Console.WriteLine($"Failure: Therapist with ID {therapistID} not found.");
            }
        }

    // Display all therapists and their availability slots
        public void DisplayTherapistAvailabilities()
        {
            foreach (var therapist in Therapists)
            {
                Console.WriteLine($"Therapist: {therapist.Name}");
                Console.WriteLine("Availability Slots:");
                foreach (var slot in therapist.AvailabilitySlots)
                {
                    Console.WriteLine($"- {slot.StartTime} to {slot.EndTime}");
                }
            }
        }

 // Check if a slot is available for a given therapist
        public bool CheckSlotAvailability(int therapistID, string slot)
        {
            var therapist = Therapists.Find(t => t.TherapistID == therapistID);
            if (therapist != null)
            {
                // Check if the therapist is available for this time slot
                foreach (var availability in therapist.AvailabilitySlots)
                {
                    if (availability.StartTime.ToString("h:mm tt") == slot)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        // Constructor to initialize DatabaseHelper
        public SystemClass()
        {
            DatabaseHelper = new DatabaseHelper();
        }

        // Display available slots
        public void DisplayAvailableSlots()
        {
            Console.WriteLine("Available Slots:");
            foreach (var slot in AvailableSlots)
            {
                Console.WriteLine(slot);
            }
        }

        // Check if a slot is available
        public bool CheckSlotAvailability(string slot)
        {
            return AvailableSlots.Contains(slot);
        }

        // Add a new appointment
        public void AddAppointment(Appointment appointment, string slot)
        {
            if (CheckSlotAvailability(slot))
            {
                Appointments.Add(appointment);
                AvailableSlots.Remove(slot);
                Console.WriteLine($"Appointment {appointment.AppointmentID} added for slot {slot}.");
            }
            else
            {
                Console.WriteLine("Selected slot is not available.");
            }
        }

        // Retrieve all appointments
        public void GetAppointments()
        {
            Console.WriteLine("Appointments List:");
            foreach (var appointment in Appointments)
            {
                Console.WriteLine($"ID: {appointment.AppointmentID}, Date: {appointment.Date}, Status: {appointment.Status}");
            }
        }
    }

    public class Homework
    {
        public int HomeworkID { get; set; }
        public int ClientID { get; set; }
        public int TherapistID { get; set; }
        public DateTime DueDate { get; set; }
        public string SubmissionStatus { get; set; }
    }

    public class Resource
    {
        public int ResourceID { get; set; }
        public int TherapistID { get; set; }
        public int ClientID { get; set; }
        public string ResourceType { get; set; }
        public DateTime DateGiven { get; set; }
    }

    public class Feedback
    {
        public int FeedbackID { get; set; }
        public int HomeworkID { get; set; }
        public int TherapistID { get; set; }
        public int ClientID { get; set; }
        public DateTime DateGiven { get; set; }
    }

    public class RegistrationForm
    {
        public int FormID { get; set; }
    }

    public class Receptionist
    {
        public int ReceptionistID { get; set; }
        public string Name { get; set; }
        public bool PaymentVerified { get; set; }
    }

    public class PaymentGateway
    {
        public int MethodType { get; set; }
        public string AccountNumber { get; set; }
        public string CardHolderName { get; set; }
        public DateTime ExpirationDate { get; set; }

        public bool ProcessTransaction(decimal amount)
        {
            Console.WriteLine($"Processing transaction of {amount:C} for cardholder {CardHolderName}");
            return true;
        }

        public bool ValidatePayment()
        {
            return DateTime.Now < ExpirationDate;
        }
    }

    public class MedicalRecord
    {
        public int PatientID { get; set; }
        public string Report { get; set; }
        public List<DateTime> TreatmentHistory { get; set; }
    }

    public class Assessment
    {
        private int ClientID { get; set; }
        private string Description { get; set; }
        private string Status { get; set; }
        private string Result { get; set; }
    }
}
